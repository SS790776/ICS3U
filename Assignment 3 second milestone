"""
Sean S
11/20/2024
ICS3U 
U5 L2

Variable dictionary:
    t - turtle.turtle(), makes for coding lines and using the turtle object functions a lot
        easier.
    file - a string that holds the name of the xpm file the code needs to use in order to
        plot the dots.
    fh - open(file, "r"), makes for opening files a lot easier,
        instead of needing to code out the whole function I could just use fh.readline().
    line - a string that holds the current line being read, will extract information from
        this variable.
    firstinf - an array that holds the information from the first line of the file.
        This includes the x and y dimensions, and the total number of colours.
    xdim - a variable split from firstinf that contains the x/horizontal dimension
        of the xpm file that needs to be drawn.
    ydim - a variable split from firstinf that contains the y/vertical dimension
        of the xpm file that needs to be drawn.
    colournum - a variable split from firstinf, holds the total number of colours
        needed to draw the picture.
    colour - a dictionary that holds the colours and their corresponding symbol.
    symb - a temporary variable split from line that holds the corresponding symbol
        of a colour.
    c - a variable needed for unpacking and splitting colour definitions.
    rainbow - a temporary variable split from line that holds the colour corresponding
        to a symbol.
    image - an array that holds all of the characters/symbols of the image,
        each index being a seperate line.
    err - a variable that holds the error message for OSError
    err2 - a variable that holds the error message for EOFError
    u - an integer that is either 1 or 0, a condition for a while loop.
    o - an integer that is either 1 or 0, a condition for a while loop.
    p - an integer that is either 1 or 0, a condition for a while loop.
    ld - a string that holds the user input for background customisation.
        L for light grey, D for dark grey, and W for white.
    space - an integer that holds the desired spacing of the dots when drawing.
    size - an integer that holds the desired size of the dots when drawing.
    rotation - an integer that holds the desired rotation in degrees when drawing.
    counter - an integer that keeps count of the amount of lines drawn. Is used
        for calculations when drawing.
    position - a variable that holds the turtle's calculated starting position
        when drawing.
    pointc - a temporary variable that holds the corresponding colour of a symbol
        when drawing.
"""

import turtle


def uprightgraph(xdim,ydim,space,size):
    """
    upright graph takes the x and y dimensions, space and size of dots, and draws the
        image at an upright 0 degree angle.
    :param xdim: xdim is an integer, the x dimension of the drawing so we know when to
        stop drawing for a line.
    :param ydim: ydim is an integer, the y dimension of the drawing so we know when the
        last line is to stop drawing.
    :param space: space is an integer, holds the desired spacing of the dots when drawing.
    :param size: size is an integer, holds the desired size of the dots when drawing.

    :return: draws the image based off of the xpm file and finishes the function.
    
    counter - an integer that keeps count of the amount of lines drawn. Is used
        for calculations when drawing.
    position - a variable that holds the turtle's calculated starting position
        when drawing.
    """ 
    print("ploting...")
    counter = 0
    
    t.goto(int(xdim)*-space/2,int(ydim)*space/2)
    position = t.pos()
    for i in image:
        counter += space
        t.goto(position[0],position[1]-counter)
        for x in i:
            pointc = colour[x]
            t.color(pointc)
            t.dot(size,pointc)
            t.forward(space)

def upsidedowngraph(xdim,ydim,space,size):
    print("plotting...")
    counter = 0
    
    t.goto(int(xdim)*space/2,int(ydim)*-space/2)
    position = t.pos()
    for i in image:
        counter += space
        t.goto(position[0],position[1]+counter)
        for x in i:
            pointc = colour[x]
            t.color(pointc)
            t.dot(size,pointc)
            t.backward(space)
def ninetygraph(xdim,ydim,space,size):
    print("ploting...")
    counter = 0
    
    t.goto(int(xdim)*space/2,int(ydim)*space/2)
    position = t.pos()
    t.right(90)
    for i in image:
        counter += space
        t.goto(position[0]-counter,position[1])
        for x in i:
            pointc = colour[x]
            t.color(pointc)
            t.dot(size,pointc)
            t.forward(space)
def twoseventygraph(xdim,ydim,space,size):
    print("ploting...")
    counter = 0
    
    t.goto(int(xdim)*-space/2,int(ydim)*-space/2)
    position = t.pos()
    t.left(90)
    for i in image:
        counter += space
        t.goto(position[0]+counter,position[1])
        for x in i:
            pointc = colour[x]
            t.color(pointc)
            t.dot(size,pointc)
            t.forward(space)
def rotate(xdim,ydim,space,size,rotation):
    turtle.clear()
    t.penup()
    t.hideturtle()
    turtle.tracer(0,0)
    print(rotation)
    if rotation == 0:
        ninetygraph(xdim,ydim,space,size)
    elif rotation == 90:
        print("yes")
        upsidedowngraph(xdim,ydim,space,size)
    elif rotation == 180:
        twoseventygraph(xdim,ydim,space,size)
    elif rotation == 270:
        uprightgraph(xdim,ydim,space,size)
    turtle.update()



t = turtle.Turtle()

#the three files used for the assignment
#file = "smiley_emoji_mod.xpm"
#file = "cool_smiley_mod.xpm"
#file = "rocky_bullwinkle_mod.xpm"

print("""What file would you like to draw?
(1)'rocky_bullwinkle_mod.xpm' (2)'smiley_emoji_mod.xpm'
(3)'cool_smiley_mod.xpm'  or  (4) 'insert the file name of your choosing'""")

file = input("")
if file == '1':
    file = "rocky_bullwinkle_mod.xpm"
elif file == '2':
    file = "smiley_emoji_mod.xpm"
elif file == '3':
    file = "cool_smiley_mod.xpm"
else:
    pass
firstinf = []
try:
    fh = open(file, "r") #open file
    firstinf = fh.readline()
    xdim, ydim, colournum = firstinf.split(" ")

    colour = {
        
        }
    
    for x in range(int(colournum)):
        line = fh.readline()
        line.strip()
        symb, c, rainbow = line.split()
        
        if symb == "~":
            symb = " "
            colour.update({symb:rainbow})

        else:
            colour.update({symb:rainbow})
    
    
    
    image = []

    for i in range(int(ydim)):
        line = fh.readline()
        line = line.replace('\n', '')
        image.append(line)




    fh.close()
except OSError as err:
    print("OSError: ", err)
except EOFError as err2:
    print("EOFError: ", err2)

t.penup()
t.hideturtle()
turtle.tracer(0,0)

u = 1
while u == 1:
    ld = input("Would you like a darker or lighter background? L/D or W for no background: ")

    if ld == "L" or ld == "l":
        turtle.bgcolor("gray70")
        u = 0
    elif ld == "D" or ld == "d":
        turtle.bgcolor("gray40")
        u = 0
    elif ld == "W" or ld == "w":
        turtle.bgcolor("white")
        u = 0
    else:
        print("not a valid response, please try again")
        u = 1

o = 1
print("""Please enter the desired spacing and size of the dots.
*Recommended amount is space = 2 and size = 4""")
while o == 1:
    try:
        space = int(input("Space: "))
        size = int(input("Size: "))
        o = 0
    except ValueError:
        print("You did not give a valid integer, please try again \n")
        o = 1
        
p = 1
while p == 1:
    try:
        rotation = int(input("Please enter the desired rotation (0, 90, 180, 270): "))
        p = 0
    except ValueError:
        print("You did not give an integer, please try again \n")
        p = 1
    if rotation == 0:
        uprightgraph(xdim,ydim,space,size)

    elif rotation == 180:
        upsidedowngraph(xdim,ydim,space,size)

    elif rotation == 90:
        ninetygraph(xdim,ydim,space,size)

    elif rotation == 270:
        twoseventygraph(xdim,ydim,space,size)

    else:
        print("You did not give a valid rotation number, please try again")
        p = 1
    
turtle.update()
print("Done! Please check to see if the Turtle graphics window has opened.")
